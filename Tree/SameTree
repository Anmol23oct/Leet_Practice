# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def isSameTree(self, p, q):
        """
        :type p: TreeNode
        :type q: TreeNode
        :rtype: bool
        """
        if p==None and q==None:
            return True
        elif p!=None and q!=None:
            if p.val==q.val:
                
                return(self.isSameTree(p.left,q.left) and
                self.isSameTree(p.right,q.right))
            
            else:
                return False
            
        else:
            
            return False
        
        
        
        
        
        
        
#         one=p
#         two=q
#         if one!=None and two!=None:
            
#             while one!=None and two!=None:
#                 if one.val!=two.val:
#                     return False

#                 elif one.left!=None and two.left!=None:
#                     one=one.left
#                     two=two.left
#                 elif one.left==None and two.left==None:
#                     break
#                 else:
#                     return False

#             one=p
#             two=q

#             while one!=None and two!=None:
#                 if one.val!=two.val:
#                     return False

#                 elif one.right!=None and two.right!=None:
#                     one=one.right
#                     two=two.right
#                 elif one.right==None and two.right==None:
#                     break
#                 else:
#                     return False 
#         elif one==None and two==None:
#             return True
#         else:
#             return False
#         return True

        